import pandas as pd
import numpy as np
import re



df = pd.read_csv('/content/drive/MyDrive/deepLearning/ResumeScreening/UpdatedResumeDataSet.csv')

df.head()

df.shape()

def cleanResume(resumeText):
  resumeText = re.sub('httpS+s*', ' ' , resumeText) #remove URLs
  resumeText = re.sub('RT|cc', '  ' ,resumeText) #remove RT and cc
  resumeText = re.sub('#S+' , ' ', resumeText)  #remove Hashtagas
  resumeText = re.sub('@S+', ' ', resumeText) # remove mentions
  resumeText = re.sub('[%s]' % re.escape("""!"#$%&'()*+,-./:;<=>?@[]^_`{|}~"""), ' ', resumeText) # removes punctuations
  resumeText = re.sub(r'[^x00-x7f]',r' ', resumeText)
  resumeText = re.sub('s+' , ' ',resumeText) #remove extrawhitespace
  return resumeText

df['cleaned_resume'] = df.Resume.apply(lambda x:cleanResume(x)) 
df.head()
from sklearn.preprocessing import LabelEncoder

var_mod = ['Category']
le = LabelEncoder()
for i in var_mod:
  df[i] = le.fit_transform(df[i])
  
  from sklearn.feature_extraction.text import TfidfVectorizer
  
  requiredText = df['cleaned_resume'].values
requiredTarget = df['Category'].values
word_vectorizer  = TfidfVectorizer(
    sublinear_tf = True,
    stop_words = 'english',
    max_features = 1500
)
word_vectorizer.fit(requiredText)
WordFeatures = word_vectorizer.transform(requiredText)

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(WordFeatures,requiredTarget,random_state=0,test_size = 0.2)
print(X_train.shape)
print(X_test.shape)
from sklearn.neighbors import KNeighborsClassifier
from sklearn.multiclass import OneVsRestClassifier
knn = KNeighborsClassifier()
clf = OneVsRestClassifier(estimator=knn)
clf.fit(X_train,y_train)
prediction = clf.predict(X_test)


print('Accuracy of Kneighbors Classifier on training set:{:.2f}'.format(clf.score(X_train,y_train)))
print('Accuracy of KNeighbors Classifier on test set:{:.2f}'.format(clf.score(X_test,y_test)))

from sklearn import metrics
print(metrics.classification_report(y_test,prediction))

le.classes_
